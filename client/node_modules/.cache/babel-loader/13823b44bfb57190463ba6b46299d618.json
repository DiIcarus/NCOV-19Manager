{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HSONNL\\\\Desktop\\\\myProject\\\\NCOV-19\\\\Repo\\\\NCOV-19Manager\\\\client\\\\src\\\\component\\\\ChartData\\\\index.tsx\";\nimport React, { Component } from \"react\"; //style importer\n\nimport * as s__ from \"./style\";\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\n// interface \nconst initState = {\n  header: \"this is header\",\n  color: ['#3e95cd', '#8e5ea2', '#3cba9f', '#c45850'],\n  label: [\"Africa\", \"Asia\", \"Europe\", \"Latin America\", \"North America\"],\n  datasetLineChart: {\n    header: \"This is header\",\n    xAsis: [1500, 1600, 1700, 1750, 1800, 1850, 1900, 1950, 1999, 2050],\n    datas: [{\n      labelName: \"A\",\n      data: [86, 114, 106, 106, 107, 111, 133, 221, 783, 2478]\n    }, {\n      labelName: \"B\",\n      data: [282, 350, 411, 502, 635, 809, 947, 1402, 3700, 4267]\n    }, {\n      labelName: \"C\",\n      data: [168, 170, 178, 190, 203, 276, 408, 547, 675, 734]\n    }, {\n      labelName: \"D\",\n      data: [40, 20, 10, 16, 24, 38, 74, 167, 508, 784]\n    }]\n  }\n};\n\nclass ChartData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initState;\n    this.typeChart = \"Line\";\n    this.datasets = [];\n    this.colorProps = ['#3e95cd', '#8e5ea2', '#3cba9f', '#c45850'];\n    this.BarHeader = \"Predicted world population (millions) in 2050\";\n\n    this.ojbectData = (data = [], LabelName = \"null\", Color = \"#333\") => {\n      return {\n        data: data,\n        label: LabelName,\n        borderColor: Color,\n        fill: false\n      };\n    };\n\n    this.objectData1 = () => {\n      return {\n        label: \"Population (millions)\",\n        backgroundColor: this.DonutColor,\n        data: [2478, 5267, 734, 784]\n      };\n    };\n\n    this.objectData2 = () => {\n      return {\n        label: \"Population (millions)\",\n        backgroundColor: this.BarColor,\n        data: [2478, 5267, 734, 784, 432]\n      };\n    };\n\n    this.getData = typeChart => {\n      switch (typeChart) {\n        case \"Line\":\n          return this.state.datasetLineChart.datas.map((value, index) => this.ojbectData(value.data, value.labelName, this.colorProps[index]));\n\n        case \"Doughnut\":\n          return [this.objectData1()];\n\n        case \"Bar\":\n          return [this.objectData2()];\n      }\n    };\n\n    this.renderChart = typeChart => {\n      switch (typeChart) {\n        case \"Line\":\n          return React.createElement(Line, {\n            data: {\n              labels: this.state.datasetLineChart.xAsis,\n              datasets: this.getData(typeChart)\n            },\n            options: {\n              title: {\n                display: true,\n                text: this.state.datasetLineChart.header\n              },\n              legend: {\n                display: true,\n                position: \"bottom\"\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          });\n\n        case \"Doughnut\":\n          return React.createElement(Doughnut, {\n            data: {\n              labels: this.DonutLabel,\n              datasets: this.getData(typeChart)\n            },\n            options: {\n              title: {\n                display: true,\n                text: this.DonutHeader\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132\n            },\n            __self: this\n          });\n\n        case \"Bar\":\n          return React.createElement(Bar, {\n            data: {\n              labels: this.BarLabel,\n              datasets: this.getData(typeChart)\n            },\n            options: {\n              legend: {\n                display: false\n              },\n              title: {\n                display: true,\n                text: this.BarHeader\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145\n            },\n            __self: this\n          });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(s__.Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, this.renderChart(this.typeChart));\n  }\n\n}\n\nexport default ChartData;","map":{"version":3,"sources":["C:/Users/HSONNL/Desktop/myProject/NCOV-19/Repo/NCOV-19Manager/client/src/component/ChartData/index.tsx"],"names":["React","Component","s__","Line","Bar","Doughnut","initState","header","color","label","datasetLineChart","xAsis","datas","labelName","data","ChartData","state","typeChart","datasets","colorProps","BarHeader","ojbectData","LabelName","Color","borderColor","fill","objectData1","backgroundColor","DonutColor","objectData2","BarColor","getData","map","value","index","renderChart","labels","title","display","text","legend","position","DonutLabel","DonutHeader","BarLabel","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n//style importer\r\nimport * as s__ from \"./style\";\r\nimport { Line, Bar, Doughnut  } from 'react-chartjs-2';\r\n\r\ninterface Data {\r\n  labelName:string,\r\n  data:number[],\r\n}\r\ninterface DataTable{\r\n  header:string,\r\n  xAsis:number[],\r\n  datas:Data[]\r\n}\r\n\r\n// interface \r\nconst initState = {\r\n  header: \"this is header\",\r\n  color: ['#3e95cd','#8e5ea2','#3cba9f','#c45850'],\r\n  label: [\"Africa\",\"Asia\",\"Europe\",\"Latin America\",\"North America\"],\r\n  datasetLineChart:{\r\n    header:\"This is header\",\r\n    xAsis:[1500, 1600, 1700, 1750, 1800, 1850, 1900, 1950, 1999, 2050],\r\n    datas:[{\r\n      labelName:\"A\",\r\n      data:[86, 114, 106, 106, 107, 111, 133, 221, 783, 2478],\r\n    },{\r\n      labelName:\"B\",\r\n      data:[282, 350, 411, 502, 635, 809, 947, 1402, 3700, 4267],\r\n    },{\r\n      labelName:\"C\",\r\n      data:[168, 170, 178, 190, 203, 276, 408, 547, 675, 734],\r\n    },{\r\n      labelName:\"D\",\r\n      data:[40, 20, 10, 16, 24, 38, 74, 167, 508, 784],\r\n    }]\r\n  } as DataTable\r\n}\r\ntype State = typeof initState;\r\ninterface Props{\r\n\r\n}\r\n\r\nclass ChartData extends Component<Props,State> {\r\n\r\n  state = initState;\r\n  typeChart=\"Line\";\r\n  datasets:any[] = [];\r\n  colorProps:string[] = ['#3e95cd','#8e5ea2','#3cba9f','#c45850'];\r\n\r\n  // DonutColor:string[] = ['#3e95cd','#8e5ea2','#3cba9f','#c45850'];\r\n  // DonutLabel:string[]= [\r\n  //           \"Africa\",\r\n  //           \"Asia\",\r\n  //           \"Europe\",\r\n  //           \"Latin America\"\r\n  //         ]\r\n  // DonutHeader:string = \"Predicted world population (millions) in 2050\";\r\n\r\n  // BarColor:string[] = [\r\n  //           \"#3e95cd\",\r\n  //           \"#8e5ea2\",\r\n  //           \"#3cba9f\",\r\n  //           \"#e8c3b9\",\r\n  //           \"#c45850\"\r\n  //         ];\r\n  // BarLabel:string[]=[\r\n  //             \"Africa\",\r\n  //             \"Asia\",\r\n  //             \"Europe\",\r\n  //             \"Latin America\",\r\n  //             \"North America\"\r\n  //           ];\r\n  BarHeader=\"Predicted world population (millions) in 2050\";\r\n\r\n  ojbectData = (data:number[] = [],LabelName:string = \"null\",Color:string = \"#333\")=>{\r\n    return {\r\n      data: data,\r\n      label: LabelName,\r\n      borderColor: Color,\r\n      fill: false\r\n    }\r\n  }\r\n\r\n  objectData1 = ()=>{\r\n      return {\r\n      label: \"Population (millions)\",\r\n      backgroundColor: this.DonutColor,\r\n      data: [2478, 5267, 734, 784]\r\n    }\r\n  }\r\n\r\n  objectData2 = () => {\r\n    return {\r\n      label: \"Population (millions)\",\r\n      backgroundColor: this.BarColor,\r\n      data: [2478, 5267, 734, 784,432]\r\n    }\r\n  }\r\n\r\n  getData=(typeChart:string)=>{\r\n    switch(typeChart){\r\n      case \"Line\":\r\n        return this.state.datasetLineChart.datas.map((value:any,index:any)=>this.ojbectData(value.data,value.labelName,this.colorProps[index]))\r\n      case \"Doughnut\":\r\n        return [this.objectData1()];\r\n      case \"Bar\":\r\n        return [this.objectData2()];\r\n    }\r\n  }\r\n\r\n  renderChart=(typeChart:string)=>{\r\n    switch(typeChart){\r\n      case \"Line\":\r\n        return <Line \r\n        data={{\r\n          labels: this.state.datasetLineChart.xAsis,\r\n          datasets: this.getData(typeChart),\r\n        }}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text: this.state.datasetLineChart.header,\r\n          },\r\n          legend: {\r\n            display: true,\r\n            position: \"bottom\"\r\n          }\r\n        }}\r\n        />;\r\n      case \"Doughnut\":\r\n        return <Doughnut\r\n        data={{\r\n          labels: this.DonutLabel,\r\n          datasets: this.getData(typeChart)\r\n        }}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text: this.DonutHeader\r\n          }\r\n        }}\r\n        />;\r\n      case \"Bar\":\r\n        return <Bar\r\n          data={{\r\n            labels: this.BarLabel,\r\n            datasets: this.getData(typeChart)\r\n          }}\r\n          options={{\r\n            legend: { display: false },\r\n            title: {\r\n              display: true,\r\n              text: this.BarHeader\r\n            }\r\n          }}\r\n        />;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <s__.Container>\r\n        {this.renderChart(this.typeChart)}\r\n      </s__.Container>\r\n    )      \r\n  }\r\n}\r\n\r\nexport default ChartData;\r\n"]},"metadata":{},"sourceType":"module"}