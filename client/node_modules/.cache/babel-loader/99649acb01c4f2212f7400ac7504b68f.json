{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HSONNL\\\\Desktop\\\\myProject\\\\NCOV-19\\\\Repo\\\\NCOV-19Manager\\\\client\\\\src\\\\component\\\\GoogleMapReact\\\\index.tsx\";\nimport React, { Component } from \"react\";\nimport OlMap from \"ol/Map\";\nimport OlView from \"ol/View\";\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport Draw from 'ol/interaction/Draw';\nimport { Point } from 'ol/geom';\nimport { Icon, Style } from 'ol/style';\nimport GeometryType from \"ol/geom/GeometryType\";\nimport { Feature } from \"ol\";\nimport IconAnchorUnits from \"ol/style/IconAnchorUnits\";\nconst initState = {\n  center: [0, 0],\n  zoom: 1\n};\n\nclass MyComponents extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initState;\n    this.raster = new TileLayer({\n      source: new OSM()\n    });\n    this.source = new VectorSource({\n      wrapX: false\n    });\n    this.vector = new VectorLayer({\n      source: this.source\n    });\n    this.olmap = new OlMap({\n      target: undefined,\n      layers: [this.raster, new VectorLayer({\n        source: new VectorSource({\n          features: [new Feature(new Point([0, 0]))]\n        }),\n        style: new Style({\n          image: new Icon({\n            anchor: [0.5, 46],\n            anchorXUnits: IconAnchorUnits.FRACTION,\n            anchorYUnits: IconAnchorUnits.PIXELS,\n            opacity: 0.95,\n            src: 'https://img.icons8.com/color/search'\n          })\n        })\n      })],\n      // layers: [\n      //   new OlLayerTile({\n      //     source: new OlSourceOSM()\n      //   })\n      // ],\n      view: new OlView({\n        center: this.state.center,\n        zoom: this.state.zoom\n      }) // interactions: new Draw({\n      //   source: new VectorSource({wrapX: false}),\n      //   type: GeometryType.POINT,\n      // })\n\n    });\n\n    this.updateMap = () => {\n      this.olmap.getView().setCenter(this.state.center);\n      this.olmap.getView().setZoom(this.state.zoom);\n    };\n  }\n\n  componentDidMount() {\n    this.olmap.setTarget(\"map\"); // Listen to map changes\n\n    this.olmap.on(\"moveend\", () => {\n      let center = this.olmap.getView().getCenter();\n      let zoom = this.olmap.getView().getZoom();\n      this.setState({\n        center,\n        zoom\n      });\n    });\n    let draw = new Draw({\n      source: new VectorSource({\n        wrapX: true,\n        features: [new Feature(new Point([100, 100]))]\n      }),\n      type: GeometryType.POINT\n    });\n    this.olmap.addInteraction(draw);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    let center = this.olmap.getView().getCenter();\n    let zoom = this.olmap.getView().getZoom();\n    if (center === nextState.center && zoom === nextState.zoom) return false;\n    return true;\n  }\n\n  userAction() {\n    this.setState({\n      center: [546000, 6868000],\n      zoom: 5\n    });\n  }\n\n  render() {\n    this.updateMap(); // Update map on render?\n\n    return React.createElement(\"div\", {\n      id: \"map\",\n      style: {\n        width: \"100%\",\n        height: \"90%\",\n        borderRadius: \"5rem\",\n        margin: \"2rem 0rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default MyComponents;","map":{"version":3,"sources":["C:/Users/HSONNL/Desktop/myProject/NCOV-19/Repo/NCOV-19Manager/client/src/component/GoogleMapReact/index.tsx"],"names":["React","Component","OlMap","OlView","OSM","Vector","VectorSource","Tile","TileLayer","VectorLayer","Draw","Point","Icon","Style","GeometryType","Feature","IconAnchorUnits","initState","center","zoom","MyComponents","state","raster","source","wrapX","vector","olmap","target","undefined","layers","features","style","image","anchor","anchorXUnits","FRACTION","anchorYUnits","PIXELS","opacity","src","view","updateMap","getView","setCenter","setZoom","componentDidMount","setTarget","on","getCenter","getZoom","setState","draw","type","POINT","addInteraction","shouldComponentUpdate","nextProps","nextState","userAction","render","width","height","borderRadius","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport OlMap from \"ol/Map\";\r\nimport OlView from \"ol/View\";\r\nimport OlLayerTile from \"ol/layer/Tile\";\r\nimport OlSourceOSM from \"ol/source/OSM\";\r\nimport {OSM, Vector as VectorSource} from 'ol/source';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer';\r\nimport Draw from 'ol/interaction/Draw';\r\nimport {LineString, Point, Polygon} from 'ol/geom';\r\nimport {Fill, Icon, Stroke, Style} from 'ol/style';\r\nimport GeometryType from \"ol/geom/GeometryType\";\r\nimport { Feature } from \"ol\";\r\nimport IconAnchorUnits from \"ol/style/IconAnchorUnits\";\r\ntype State = typeof initState;\r\nconst initState = {\r\n  center: [0, 0], zoom: 1\r\n}\r\nclass MyComponents extends Component<{},State> {\r\n  state = initState;\r\n  raster = new TileLayer({\r\n    source: new OSM()\r\n  });\r\n  source = new VectorSource({wrapX: false});\r\n  vector = new VectorLayer({\r\n    source: this.source\r\n  });\r\n  olmap:OlMap = new OlMap({\r\n      target: undefined,\r\n      layers: [this.raster,\r\n            new VectorLayer({\r\n          source: new VectorSource({\r\n            features: [new Feature(new Point([0, 0])),]\r\n          }),\r\n          style: new Style({\r\n            image: new Icon({\r\n              anchor: [0.5, 46],\r\n              anchorXUnits: IconAnchorUnits.FRACTION,\r\n              anchorYUnits: IconAnchorUnits.PIXELS,\r\n              opacity: 0.95,\r\n              src: 'https://img.icons8.com/color/search'\r\n            }),\r\n          })\r\n        })\r\n      ],\r\n      // layers: [\r\n      //   new OlLayerTile({\r\n      //     source: new OlSourceOSM()\r\n      //   })\r\n      // ],\r\n      view: new OlView({\r\n        center: this.state.center,\r\n        zoom: this.state.zoom\r\n      }),\r\n      // interactions: new Draw({\r\n      //   source: new VectorSource({wrapX: false}),\r\n      //   type: GeometryType.POINT,\r\n      // })\r\n  })\r\n\r\n  updateMap = () => {\r\n    this.olmap.getView().setCenter(this.state.center);\r\n    this.olmap.getView().setZoom(this.state.zoom);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.olmap.setTarget(\"map\");\r\n    // Listen to map changes\r\n    this.olmap.on(\"moveend\", () => {\r\n      let center = this.olmap.getView().getCenter();\r\n      let zoom = this.olmap.getView().getZoom();\r\n      this.setState({ center, zoom });\r\n    });\r\n    let draw = new Draw({\r\n      source: new VectorSource({wrapX: true,features:[new Feature(new Point([100,100]))]}),\r\n      type: GeometryType.POINT\r\n    });\r\n    this.olmap.addInteraction(draw);\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps:any, nextState:any) {\r\n    let center = this.olmap.getView().getCenter();\r\n    let zoom = this.olmap.getView().getZoom();\r\n    if (center === nextState.center && zoom === nextState.zoom) return false;\r\n    return true;\r\n  }\r\n\r\n  userAction() {\r\n    this.setState({ center: [546000, 6868000], zoom: 5 });\r\n  }\r\n\r\n  render() {\r\n    this.updateMap(); // Update map on render?\r\n    return (\r\n      <div id=\"map\" style={{ width: \"100%\", height: \"90%\", borderRadius: \"5rem\", margin: \"2rem 0rem\"}}>\r\n        {/* <button onClick={e => this.userAction()}>setState on click</button> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyComponents;"]},"metadata":{},"sourceType":"module"}