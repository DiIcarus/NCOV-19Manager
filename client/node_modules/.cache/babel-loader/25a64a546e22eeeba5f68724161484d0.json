{"ast":null,"code":"import axios from 'axios';\nimport * as config__ from \"./../config\";\nconst ROOM = config__.ROOM;\nconst DIEMDANH = config__.DIEMDANH;\nexport default class RoomAPI {\n  constructor() {\n    this.getAll = (token, formData, response, error) => {\n      const data = {\n        \"page\": formData.get(\"page\"),\n        \"typesort\": formData.get(\"typesort\"),\n        \"search\": formData.get(\"search\")\n      };\n      axios.get(ROOM, {\n        headers: {\n          Authorization: token\n        },\n        data: data\n      }).then(response).catch(error);\n    };\n\n    this.getList = (token, params, response, error) => {\n      axios.get(ROOM + params, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.getListHistory = (token, params, response, error) => {\n      axios.get(DIEMDANH + params, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.get = (token, idRoom, response, error) => {\n      axios.get(ROOM + idRoom, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.upDate = (token, idRoom, formData, response, error) => {\n      const data = {\n        \"currentNumber\": formData.get(\"currentNumber\")\n      };\n      axios.put(ROOM + idRoom, data, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.delete = (token, idRoom, response, error) => {\n      axios({\n        method: 'DELETE',\n        url: ROOM + idRoom,\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.create = (token, formData, response, error) => {\n      const data = {\n        \"maxNumber\": formData.get(\"maxNumber\"),\n        \"address\": formData.get(\"address\"),\n        \"name\": formData.get(\"name\")\n      };\n      axios.post(ROOM, data, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/HSONNL/Desktop/myProject/NCOV-19/Repo/NCOV-19Manager/client/src/modules/api/room.ts"],"names":["axios","config__","ROOM","DIEMDANH","RoomAPI","getAll","token","formData","response","error","data","get","headers","Authorization","then","catch","getList","params","getListHistory","idRoom","upDate","put","delete","method","url","create","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B;AAEA,MAAMC,IAAW,GAAGD,QAAQ,CAACC,IAA7B;AACA,MAAMC,QAAe,GAAGF,QAAQ,CAACE,QAAjC;AACA,eAAe,MAAMC,OAAN,CAAc;AAAA;AAAA,SAE3BC,MAF2B,GAElB,CAACC,KAAD,EAAeC,QAAf,EAAmCC,QAAnC,EAAkDC,KAAlD,KAAiE;AACxE,YAAMC,IAAI,GAAG;AACX,gBAAQH,QAAQ,CAACI,GAAT,CAAa,MAAb,CADG;AAEX,oBAAYJ,QAAQ,CAACI,GAAT,CAAa,UAAb,CAFD;AAGX,kBAAUJ,QAAQ,CAACI,GAAT,CAAa,QAAb;AAHC,OAAb;AAKAX,MAAAA,KAAK,CAACW,GAAN,CAAUT,IAAV,EAAe;AAAEU,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEP;AAAjB,SAAX;AAAoCI,QAAAA,IAAI,EAACA;AAAzC,OAAf,EACGI,IADH,CACQN,QADR,EAEGO,KAFH,CAESN,KAFT;AAGD,KAX0B;;AAAA,SAY3BO,OAZ2B,GAYjB,CAACV,KAAD,EAAeW,MAAf,EAA+BT,QAA/B,EAA8CC,KAA9C,KAA6D;AACrET,MAAAA,KAAK,CAACW,GAAN,CAAUT,IAAI,GAACe,MAAf,EAAsB;AAAEL,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEP;AAAjB;AAAX,OAAtB,EACGQ,IADH,CACQN,QADR,EAEGO,KAFH,CAESN,KAFT;AAGD,KAhB0B;;AAAA,SAkB3BS,cAlB2B,GAkBV,CAACZ,KAAD,EAAeW,MAAf,EAA+BT,QAA/B,EAA8CC,KAA9C,KAA6D;AAC5ET,MAAAA,KAAK,CAACW,GAAN,CAAUR,QAAQ,GAACc,MAAnB,EAA0B;AAAEL,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEP;AAAjB;AAAX,OAA1B,EACGQ,IADH,CACQN,QADR,EAEGO,KAFH,CAESN,KAFT;AAGD,KAtB0B;;AAAA,SAwB3BE,GAxB2B,GAwBrB,CAACL,KAAD,EAAgBa,MAAhB,EAAgCX,QAAhC,EAA+CC,KAA/C,KAA8D;AAClET,MAAAA,KAAK,CAACW,GAAN,CAAUT,IAAI,GAAGiB,MAAjB,EAAyB;AAAEP,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEP;AAAjB;AAAX,OAAzB,EACGQ,IADH,CACQN,QADR,EAEGO,KAFH,CAESN,KAFT;AAGD,KA5B0B;;AAAA,SA8B3BW,MA9B2B,GA8BlB,CAACd,KAAD,EAAgBa,MAAhB,EAAgCZ,QAAhC,EAAoDC,QAApD,EAAmEC,KAAnE,KAAkF;AACzF,YAAMC,IAAI,GAAG;AACX,yBAAiBH,QAAQ,CAACI,GAAT,CAAa,eAAb;AADN,OAAb;AAGAX,MAAAA,KAAK,CAACqB,GAAN,CAAUnB,IAAI,GAAGiB,MAAjB,EAAyBT,IAAzB,EAA+B;AAAEE,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEP;AAAjB;AAAX,OAA/B,EACGQ,IADH,CACQN,QADR,EAEGO,KAFH,CAESN,KAFT;AAGD,KArC0B;;AAAA,SAuC3Ba,MAvC2B,GAuClB,CAAChB,KAAD,EAAgBa,MAAhB,EAAgCX,QAAhC,EAA+CC,KAA/C,KAA8D;AACrET,MAAAA,KAAK,CAAC;AACJuB,QAAAA,MAAM,EAAE,QADJ;AAEJC,QAAAA,GAAG,EAAEtB,IAAI,GAAGiB,MAFR;AAGJP,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAEP;AADR;AAHL,OAAD,CAAL,CAQGQ,IARH,CAQQN,QARR,EASGO,KATH,CASSN,KATT;AAUD,KAlD0B;;AAAA,SAoD3BgB,MApD2B,GAoDlB,CAACnB,KAAD,EAAgBC,QAAhB,EAAoCC,QAApC,EAAmDC,KAAnD,KAAkE;AACzE,YAAMC,IAAI,GAAG;AACX,qBAAaH,QAAQ,CAACI,GAAT,CAAa,WAAb,CADF;AAEX,mBAAWJ,QAAQ,CAACI,GAAT,CAAa,SAAb,CAFA;AAGX,gBAAQJ,QAAQ,CAACI,GAAT,CAAa,MAAb;AAHG,OAAb;AAKAX,MAAAA,KAAK,CAAC0B,IAAN,CAAWxB,IAAX,EAAiBQ,IAAjB,EAAuB;AAAEE,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEP;AAAjB;AAAX,OAAvB,EACGQ,IADH,CACQN,QADR,EAEGO,KAFH,CAESN,KAFT;AAGD,KA7D0B;AAAA;;AAAA","sourcesContent":["import axios from 'axios';\r\nimport * as config__ from \"./../config\";\r\n\r\nconst ROOM:string = config__.ROOM;\r\nconst DIEMDANH:string = config__.DIEMDANH;\r\nexport default class RoomAPI {\r\n\r\n  getAll = (token: string,formData: FormData, response: any, error: any) => {\r\n    const data = {\r\n      \"page\": formData.get(\"page\"),\r\n      \"typesort\": formData.get(\"typesort\"),\r\n      \"search\": formData.get(\"search\")\r\n    }\r\n    axios.get(ROOM,{ headers: { Authorization: token },data:data })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n  getList = (token: string,params: string, response: any, error: any) => {\r\n    axios.get(ROOM+params,{ headers: { Authorization: token }})\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  getListHistory = (token: string,params: string, response: any, error: any) => {\r\n    axios.get(DIEMDANH+params,{ headers: { Authorization: token }})\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  get = (token: string, idRoom: string, response: any, error: any) => {\r\n    axios.get(ROOM + idRoom, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n  \r\n  upDate = (token: string, idRoom: string, formData: FormData, response: any, error: any) => {\r\n    const data = {\r\n      \"currentNumber\": formData.get(\"currentNumber\")\r\n    }\r\n    axios.put(ROOM + idRoom, data, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  delete = (token: string, idRoom: string, response: any, error: any) => {\r\n    axios({\r\n      method: 'DELETE',\r\n      url: ROOM + idRoom,\r\n      headers: {\r\n        Authorization: token\r\n      }\r\n    }\r\n    )\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  create = (token: string, formData: FormData, response: any, error: any) => {\r\n    const data = {\r\n      \"maxNumber\": formData.get(\"maxNumber\"),\r\n      \"address\": formData.get(\"address\"),\r\n      \"name\": formData.get(\"name\")\r\n    }\r\n    axios.post(ROOM, data, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}