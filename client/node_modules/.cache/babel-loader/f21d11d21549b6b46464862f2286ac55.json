{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HSONNL\\\\Desktop\\\\myProject\\\\NCOV-19\\\\Repo\\\\NCOV-19Manager\\\\client\\\\src\\\\component\\\\GoogleMapReact\\\\index.tsx\";\nimport React, { Component } from \"react\";\nimport OlMap from \"ol/Map\";\nimport OlView from \"ol/View\";\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport { Point } from 'ol/geom';\nimport { Icon, Style } from 'ol/style';\nimport { Feature } from \"ol\";\nimport IconAnchorUnits from \"ol/style/IconAnchorUnits\";\nconst initState = {\n  center: [0, 0],\n  zoom: 1\n};\n\nclass MyComponents extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initState;\n    this.raster = new TileLayer({\n      source: new OSM()\n    });\n    this.source = new VectorSource({\n      wrapX: false\n    });\n    this.vector = new VectorLayer({\n      source: this.source\n    });\n    this.olmap = new OlMap({\n      target: undefined,\n      layers: [this.raster, new VectorLayer({\n        source: new VectorSource({\n          features: this.props.listPoint.map(value => new Feature(new Point([value.x, value.y])))\n        }),\n        style: new Style({\n          image: new Icon({\n            anchor: [0.5, 46],\n            anchorXUnits: IconAnchorUnits.FRACTION,\n            anchorYUnits: IconAnchorUnits.PIXELS,\n            opacity: 0.95,\n            src: 'https://img.icons8.com/color/search'\n          })\n        })\n      })],\n      // layers: [\n      //   new OlLayerTile({\n      //     source: new OlSourceOSM()\n      //   })\n      // ],\n      view: new OlView({\n        center: this.state.center,\n        zoom: this.state.zoom\n      }) // interactions: new Draw({\n      //   source: new VectorSource({wrapX: false}),\n      //   type: GeometryType.POINT,\n      // })\n\n    });\n  }\n\n  // updateMap = () => {\n  //   this.olmap.getView().setCenter(this.state.center);\n  //   this.olmap.getView().setZoom(this.state.zoom);\n  // }\n  // componentDidMount() {\n  //   this.olmap.setTarget(\"map\");\n  //   // Listen to map changes\n  //   this.olmap.on(\"moveend\", () => {\n  //     let center = this.olmap.getView().getCenter();\n  //     let zoom = this.olmap.getView().getZoom();\n  //     this.setState({ center, zoom });\n  //   });\n  //   let draw = new Draw({\n  //     source: new VectorSource({wrapX: true,features:[new Feature(new Point([100,100]))]}),\n  //     type: GeometryType.POINT\n  //   });\n  //   this.olmap.addInteraction(draw);\n  // }\n  // shouldComponentUpdate(nextProps:any, nextState:any) {\n  //   let center = this.olmap.getView().getCenter();\n  //   let zoom = this.olmap.getView().getZoom();\n  //   if (center === nextState.center && zoom === nextState.zoom) return false;\n  //   return true;\n  // }\n  // userAction() {\n  //   this.setState({ center: [546000, 6868000], zoom: 5 });\n  // }\n  render() {\n    this.updateMap(); // Update map on render?\n\n    return React.createElement(\"div\", {\n      id: \"map\",\n      style: {\n        width: \"100%\",\n        height: \"90%\",\n        borderRadius: \"5rem\",\n        margin: \"2rem 0rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default MyComponents;","map":{"version":3,"sources":["C:/Users/HSONNL/Desktop/myProject/NCOV-19/Repo/NCOV-19Manager/client/src/component/GoogleMapReact/index.tsx"],"names":["React","Component","OlMap","OlView","OSM","Vector","VectorSource","Tile","TileLayer","VectorLayer","Point","Icon","Style","Feature","IconAnchorUnits","initState","center","zoom","MyComponents","state","raster","source","wrapX","vector","olmap","target","undefined","layers","features","props","listPoint","map","value","x","y","style","image","anchor","anchorXUnits","FRACTION","anchorYUnits","PIXELS","opacity","src","view","render","updateMap","width","height","borderRadius","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport OlMap from \"ol/Map\";\r\nimport OlView from \"ol/View\";\r\nimport OlLayerTile from \"ol/layer/Tile\";\r\nimport OlSourceOSM from \"ol/source/OSM\";\r\nimport {OSM, Vector as VectorSource} from 'ol/source';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer';\r\nimport Draw from 'ol/interaction/Draw';\r\nimport {LineString, Point, Polygon} from 'ol/geom';\r\nimport {Fill, Icon, Stroke, Style} from 'ol/style';\r\nimport GeometryType from \"ol/geom/GeometryType\";\r\nimport { Feature } from \"ol\";\r\nimport IconAnchorUnits from \"ol/style/IconAnchorUnits\";\r\ntype State = typeof initState;\r\nconst initState = {\r\n  center: [0, 0], zoom: 1\r\n}\r\n\r\ninterface Location{\r\n  x:number,\r\n  y:number\r\n}\r\ninterface Props{\r\n  listPoint:Location[]\r\n}\r\nclass MyComponents extends Component<Props,State> {\r\n  state = initState;\r\n  // point = [{x:0,y:0},{x:-11000000,y:4600000}]\r\n  raster = new TileLayer({\r\n    source: new OSM()\r\n  });\r\n  source = new VectorSource({wrapX: false});\r\n  vector = new VectorLayer({\r\n    source: this.source\r\n  });\r\n  olmap:OlMap = new OlMap({\r\n      target: undefined,\r\n      layers: [this.raster,\r\n        new VectorLayer({\r\n          source: new VectorSource({\r\n            features: this.props.listPoint.map((value)=>(new Feature(new Point([value.x,value.y]))))\r\n          }),\r\n          style: new Style({\r\n            image: new Icon({\r\n              anchor: [0.5, 46],\r\n              anchorXUnits: IconAnchorUnits.FRACTION,\r\n              anchorYUnits: IconAnchorUnits.PIXELS,\r\n              opacity: 0.95,\r\n              src: 'https://img.icons8.com/color/search'\r\n            }),\r\n          })\r\n        })\r\n      ],\r\n      // layers: [\r\n      //   new OlLayerTile({\r\n      //     source: new OlSourceOSM()\r\n      //   })\r\n      // ],\r\n      view: new OlView({\r\n        center: this.state.center,\r\n        zoom: this.state.zoom\r\n      }),\r\n      // interactions: new Draw({\r\n      //   source: new VectorSource({wrapX: false}),\r\n      //   type: GeometryType.POINT,\r\n      // })\r\n  })\r\n\r\n  // updateMap = () => {\r\n  //   this.olmap.getView().setCenter(this.state.center);\r\n  //   this.olmap.getView().setZoom(this.state.zoom);\r\n  // }\r\n\r\n  // componentDidMount() {\r\n  //   this.olmap.setTarget(\"map\");\r\n  //   // Listen to map changes\r\n  //   this.olmap.on(\"moveend\", () => {\r\n  //     let center = this.olmap.getView().getCenter();\r\n  //     let zoom = this.olmap.getView().getZoom();\r\n  //     this.setState({ center, zoom });\r\n  //   });\r\n  //   let draw = new Draw({\r\n  //     source: new VectorSource({wrapX: true,features:[new Feature(new Point([100,100]))]}),\r\n  //     type: GeometryType.POINT\r\n  //   });\r\n  //   this.olmap.addInteraction(draw);\r\n  // }\r\n\r\n  // shouldComponentUpdate(nextProps:any, nextState:any) {\r\n  //   let center = this.olmap.getView().getCenter();\r\n  //   let zoom = this.olmap.getView().getZoom();\r\n  //   if (center === nextState.center && zoom === nextState.zoom) return false;\r\n  //   return true;\r\n  // }\r\n\r\n  // userAction() {\r\n  //   this.setState({ center: [546000, 6868000], zoom: 5 });\r\n  // }\r\n\r\n  render() {\r\n    this.updateMap(); // Update map on render?\r\n    return (\r\n      <div id=\"map\" style={{ width: \"100%\", height: \"90%\", borderRadius: \"5rem\", margin: \"2rem 0rem\"}}>\r\n        {/* <button onClick={e => this.userAction()}>setState on click</button> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyComponents;"]},"metadata":{},"sourceType":"module"}