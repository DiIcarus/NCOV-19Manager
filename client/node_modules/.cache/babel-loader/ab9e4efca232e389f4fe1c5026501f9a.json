{"ast":null,"code":"import axios from 'axios';\nexport default class RoomAPI {\n  constructor() {\n    this.getAll = (token, formData, response, error) => {\n      const data = {\n        \"page\": formData.get(\"page\"),\n        \"typesort\": formData.get(\"typesort\"),\n        \"search\": formData.get(\"search\")\n      };\n      console.log(data); // axios.get('/api/room/',{ headers: { Authorization: token },data:data })\n\n      fetch('/api/room/', {\n        method: 'GET',\n        headers: {\n          Authorization: token\n        },\n        body: JSON.stringify(data)\n      });\n      axios({\n        method: 'GET',\n        url: '/api/room/',\n        data: data,\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.get = (token, idRoom, response, error) => {\n      axios.get('/api/room/' + idRoom, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.upDate = (token, idRoom, formData, response, error) => {\n      const data = {\n        \"currentNumber\": formData.get(\"currentNumber\")\n      };\n      axios.put('/api/room/' + idRoom, data, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.delete = (token, idRoom, response, error) => {\n      axios({\n        method: 'DELETE',\n        url: '/api/room/' + idRoom,\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.create = (token, formData, response, error) => {\n      const data = {\n        \"maxNumber\": formData.get(\"maxNumber\"),\n        \"address\": formData.get(\"address\"),\n        \"name\": formData.get(\"name\")\n      };\n      axios.post('/api/room/', data, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/HSONNL/Desktop/myProject/NCOV-19/Repo/NCOV-19Manager/client/src/modules/api/room.ts"],"names":["axios","RoomAPI","getAll","token","formData","response","error","data","get","console","log","fetch","method","headers","Authorization","body","JSON","stringify","url","then","catch","idRoom","upDate","put","delete","create","post"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\nexport default class RoomAPI {\r\n\r\n  getAll = (token: string,formData: FormData, response: any, error: any) => {\r\n    const data = {\r\n      \"page\": formData.get(\"page\"),\r\n      \"typesort\": formData.get(\"typesort\"),\r\n      \"search\": formData.get(\"search\")\r\n    }\r\n    console.log(data);\r\n    // axios.get('/api/room/',{ headers: { Authorization: token },data:data })\r\n    fetch(\r\n      '/api/room/',\r\n      {\r\n        method:'GET',\r\n        headers:{\r\n          Authorization: token\r\n        },\r\n        body:JSON.stringify(data)\r\n      }\r\n    )\r\n    axios({\r\n      method: 'GET',\r\n      url: '/api/room/',\r\n      data:data,\r\n      headers: {\r\n        Authorization: token\r\n      }\r\n    })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  get = (token: string, idRoom: string, response: any, error: any) => {\r\n    axios.get('/api/room/' + idRoom, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n  upDate = (token: string, idRoom: string, formData: FormData, response: any, error: any) => {\r\n    const data = {\r\n      \"currentNumber\": formData.get(\"currentNumber\")\r\n    }\r\n    axios.put('/api/room/' + idRoom, data, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  delete = (token: string, idRoom: string, response: any, error: any) => {\r\n    axios({\r\n      method: 'DELETE',\r\n      url: '/api/room/' + idRoom,\r\n      headers: {\r\n        Authorization: token\r\n      }\r\n    }\r\n    )\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  create = (token: string, formData: FormData, response: any, error: any) => {\r\n    const data = {\r\n      \"maxNumber\": formData.get(\"maxNumber\"),\r\n      \"address\": formData.get(\"address\"),\r\n      \"name\": formData.get(\"name\")\r\n    }\r\n    axios.post('/api/room/', data, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}