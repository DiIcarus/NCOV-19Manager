{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HSONNL\\\\Desktop\\\\myProject\\\\NCOV-19\\\\Repo\\\\NCOV-19Manager\\\\client\\\\src\\\\component\\\\RootContainer\\\\index.tsx\";\n// import React, { Component } from \"react\";\n// import * as s__ from \"./style\";\n// import MenuTop from \"./../MenuTop/index\";\n// import { BrowserRouter, Switch, Route } from \"react-router-dom\";\n// import FormRegister from \"./../FormRegister/index\";\n// import FormSignin from \"./../FormSignIn/index\";\n// import ChartData from \"../ChartData/index\";\n// import HomeComponent from \"../HomeComponent/index\";\n// import ManagerComponent from '../ManagerComponent/index';\n// import Footer from \"../Footer/index\";\n// import  { MainState } from '../../store/index';\n// import {connect} from 'react-redux';\n// import {UserssignedState} from '../../store/UsersSigned/type';\n// type Props = {\n//   UserssignedState: UserssignedState\n// }\n// class RootContainer extends Component {\n//   componentDidMount(){\n//     window.localStorage.setItem('UsersInfo',JSON.stringify(\"\"));\n//     window.sessionStorage.setItem('UsersInfo',JSON.stringify(\"\"));\n//     // setInterval(()=>{\n//     //   //undefine\n//     //   // let str = \n//     //   let a:object = JSON.parse( String(window.localStorage.getItem('UsersInfo')));\n//     //   console.log(a)\n//     //   console.log(window.sessionStorage.accessToken)\n//     // },2000);\n//   }\n//   renderSwitch = () => {\n//     return (\n//       <Switch>\n//         <Route path=\"/manager\" children={<ManagerComponent />}/>\n//         <Route path=\"/register\" children={<FormRegister />}/>\n//         <Route path=\"/signin\" children={<FormSignin />}/>\n//         <Route path=\"/\" children={<HomeComponent />} />\n//       </Switch>\n//     );\n//   };\n//   render() {\n//     return (\n//       <s__.Container>\n//         <MenuTop />\n//         {this.renderSwitch()}\n//         <Footer/>\n//       </s__.Container>\n//     );\n//   }\n// }\n// const mapStateToProps = (state:MainState) => ( {\n//   UserssignedState: state.UserssignedState\n// })\n// export default connect(mapStateToProps,{})(RootContainer);\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, useHistory, useLocation } from \"react-router-dom\"; // This example has 3 pages: a public page, a protected\n// page, and a login screen. In order to see the protected\n// page, you must first login. Pretty standard stuff.\n//\n// First, visit the public page. Then, visit the protected\n// page. You're not yet logged in, so you are redirected\n// to the login page. After you login, you are redirected\n// back to the protected page.\n//\n// Notice the URL change each time. If you click the back\n// button at this point, would you expect to go back to the\n// login page? No! You're already logged in. Try it out,\n// and you'll see you go back to the page you visited\n// just *before* logging in, the public page.\n\nexport default function AuthExample() {\n  return React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(AuthButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/public\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Public Page\")), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/protected\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Protected Page\"))), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(Route, {\n    path: \"/public\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(PublicPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), React.createElement(Route, {\n    path: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(LoginPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })), React.createElement(PrivateRoute, {\n    path: \"/protected\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(ProtectedPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })))));\n}\nconst fakeAuth = {\n  isAuthenticated: false,\n\n  authenticate(cb) {\n    fakeAuth.isAuthenticated = true;\n    setTimeout(cb, 100); // fake async\n  },\n\n  signout(cb) {\n    fakeAuth.isAuthenticated = false;\n    setTimeout(cb, 100);\n  }\n\n};\n\nfunction AuthButton() {\n  let history = useHistory();\n  return fakeAuth.isAuthenticated ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Welcome!\", \" \", React.createElement(\"button\", {\n    onClick: () => {\n      fakeAuth.signout(() => history.push(\"/\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Sign out\")) : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"You are not logged in.\");\n} // A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\n\n\nfunction PrivateRoute({ ...rest\n}) {\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: ({\n      location\n    }) => fakeAuth.isAuthenticated ? React.createElement(React.Fragment, null) : React.createElement(Redirect, {\n      to: {\n        pathname: \"/login\",\n        state: {\n          from: location\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }));\n}\n\nfunction PublicPage() {\n  return React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"Public\");\n}\n\nfunction ProtectedPage() {\n  return React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"Protected\");\n}\n\nfunction LoginPage() {\n  let history = useHistory();\n  let location = useLocation();\n  console.log(\"Location\", useLocation());\n  console.log(\"hitory\", useHistory());\n  let {\n    from\n  } = location.state || {\n    from: {\n      pathname: \"/\"\n    }\n  };\n  console.log(from);\n\n  let login = () => {\n    history.replace(from);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, \"You must log in to view the page at \", from.pathname), React.createElement(\"button\", {\n    onClick: login,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, \"Log in\"));\n}","map":{"version":3,"sources":["C:/Users/HSONNL/Desktop/myProject/NCOV-19/Repo/NCOV-19Manager/client/src/component/RootContainer/index.tsx"],"names":["React","BrowserRouter","Router","Switch","Route","Link","Redirect","useHistory","useLocation","AuthExample","fakeAuth","isAuthenticated","authenticate","cb","setTimeout","signout","AuthButton","history","push","PrivateRoute","rest","location","pathname","state","from","PublicPage","ProtectedPage","LoginPage","console","log","login","replace"],"mappings":"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","sourcesContent":["// import React, { Component } from \"react\";\r\n// import * as s__ from \"./style\";\r\n// import MenuTop from \"./../MenuTop/index\";\r\n// import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\n// import FormRegister from \"./../FormRegister/index\";\r\n// import FormSignin from \"./../FormSignIn/index\";\r\n\r\n// import ChartData from \"../ChartData/index\";\r\n// import HomeComponent from \"../HomeComponent/index\";\r\n// import ManagerComponent from '../ManagerComponent/index';\r\n// import Footer from \"../Footer/index\";\r\n// import  { MainState } from '../../store/index';\r\n// import {connect} from 'react-redux';\r\n// import {UserssignedState} from '../../store/UsersSigned/type';\r\n// type Props = {\r\n//   UserssignedState: UserssignedState\r\n// }\r\n// class RootContainer extends Component {\r\n//   componentDidMount(){\r\n//     window.localStorage.setItem('UsersInfo',JSON.stringify(\"\"));\r\n//     window.sessionStorage.setItem('UsersInfo',JSON.stringify(\"\"));\r\n//     // setInterval(()=>{\r\n//     //   //undefine\r\n//     //   // let str = \r\n//     //   let a:object = JSON.parse( String(window.localStorage.getItem('UsersInfo')));\r\n//     //   console.log(a)\r\n//     //   console.log(window.sessionStorage.accessToken)\r\n//     // },2000);\r\n//   }\r\n//   renderSwitch = () => {\r\n//     return (\r\n//       <Switch>\r\n//         <Route path=\"/manager\" children={<ManagerComponent />}/>\r\n//         <Route path=\"/register\" children={<FormRegister />}/>\r\n//         <Route path=\"/signin\" children={<FormSignin />}/>\r\n//         <Route path=\"/\" children={<HomeComponent />} />\r\n//       </Switch>\r\n//     );\r\n//   };\r\n\r\n\r\n//   render() {\r\n//     return (\r\n//       <s__.Container>\r\n//         <MenuTop />\r\n//         {this.renderSwitch()}\r\n//         <Footer/>\r\n//       </s__.Container>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = (state:MainState) => ( {\r\n//   UserssignedState: state.UserssignedState\r\n\r\n// })\r\n// export default connect(mapStateToProps,{})(RootContainer);\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  useHistory,\r\n  useLocation\r\n} from \"react-router-dom\";\r\n\r\n// This example has 3 pages: a public page, a protected\r\n// page, and a login screen. In order to see the protected\r\n// page, you must first login. Pretty standard stuff.\r\n//\r\n// First, visit the public page. Then, visit the protected\r\n// page. You're not yet logged in, so you are redirected\r\n// to the login page. After you login, you are redirected\r\n// back to the protected page.\r\n//\r\n// Notice the URL change each time. If you click the back\r\n// button at this point, would you expect to go back to the\r\n// login page? No! You're already logged in. Try it out,\r\n// and you'll see you go back to the page you visited\r\n// just *before* logging in, the public page.\r\n\r\nexport default function AuthExample() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <AuthButton />\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/public\">Public Page</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/protected\">Protected Page</Link>\r\n          </li>\r\n        </ul>\r\n        <Switch>\r\n          <Route path=\"/public\">\r\n            <PublicPage />\r\n          </Route>\r\n          <Route path=\"/login\">\r\n            <LoginPage />\r\n          </Route>\r\n          <PrivateRoute path=\"/protected\">\r\n            <ProtectedPage />\r\n          </PrivateRoute>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst fakeAuth = {\r\n  isAuthenticated: false,\r\n  authenticate(cb:any) {\r\n    fakeAuth.isAuthenticated = true;\r\n    setTimeout(cb, 100); // fake async\r\n  },\r\n  signout(cb:any) {\r\n    fakeAuth.isAuthenticated = false;\r\n    setTimeout(cb, 100);\r\n  }\r\n};\r\n\r\nfunction AuthButton() {\r\n  let history = useHistory();\r\n\r\n  return fakeAuth.isAuthenticated ? (\r\n    <p>\r\n      Welcome!{\" \"}\r\n      <button\r\n        onClick={() => {\r\n          fakeAuth.signout(() => history.push(\"/\"));\r\n        }}\r\n      >\r\n        Sign out\r\n      </button>\r\n    </p>\r\n  ) : (\r\n    <p>You are not logged in.</p>\r\n  );\r\n}\r\n\r\n// A wrapper for <Route> that redirects to the login\r\n// screen if you're not yet authenticated.\r\nfunction PrivateRoute({...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        fakeAuth.isAuthenticated ? (\r\n          <></>\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/login\",\r\n              state: { from: location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nfunction PublicPage() {\r\n  return <h3>Public</h3>;\r\n}\r\n\r\nfunction ProtectedPage() {\r\n  return <h3>Protected</h3>;\r\n}\r\n\r\nfunction LoginPage() {\r\n  let history = useHistory();\r\n  let location = useLocation();\r\n  console.log(\"Location\",useLocation())\r\n  console.log(\"hitory\",useHistory());\r\n  let { from }:any = location.state || { from: { pathname: \"/\" } };\r\n  console.log(from);\r\n\r\n  let login = () => {\r\n      history.replace(from);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>You must log in to view the page at {from.pathname}</p>\r\n      <button onClick={login}>Log in</button>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}