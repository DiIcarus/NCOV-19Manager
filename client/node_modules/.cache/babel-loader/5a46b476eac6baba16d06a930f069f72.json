{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HSONNL\\\\Desktop\\\\myProject\\\\NCOV-19\\\\Repo\\\\NCOV-19Manager\\\\client\\\\src\\\\component\\\\GoogleMapReact\\\\index.tsx\";\nimport React, { Component } from \"react\";\nimport OlMap from \"ol/Map\";\nimport OlView from \"ol/View\";\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport { Point } from 'ol/geom';\nimport { Icon, Style } from 'ol/style';\nimport { Feature } from \"ol\";\nimport IconAnchorUnits from \"ol/style/IconAnchorUnits\";\nimport { fromLonLat } from 'ol/proj';\nconst initState = {\n  center: fromLonLat([106.79666, 10.84811]),\n  zoom: 15,\n  feature: [] // olmap: new OlMap({\n  //     target: undefined,\n  //     layers: [new TileLayer({source: new OSM()}),\n  //       new VectorLayer({\n  //         source: new VectorSource({\n  //           features: [new Feature(new Point([106.79663935413441,10.84811849654838])),new Feature(new Point([100123,10600]))],\n  //         }),\n  //         style: new Style({\n  //           image: new Icon({\n  //             anchor: [0.5, 46],\n  //             anchorXUnits: IconAnchorUnits.FRACTION,\n  //             anchorYUnits: IconAnchorUnits.PIXELS,\n  //             opacity: 0.95,\n  //             src: 'https://img.icons8.com/color/search'\n  //           }),\n  //         })\n  //       })\n  //     ],\n  //     view: new OlView({\n  //       center: [0,0],\n  //       zoom: 1\n  //     }),\n  // })\n\n};\n\nclass MyComponents extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initState;\n    this.raster = new TileLayer({\n      source: new OSM()\n    });\n    this.olmap = new OlMap({\n      target: undefined,\n      // layers: [this.raster,\n      //   new VectorLayer({\n      //     source: new VectorSource({\n      //       // features: this.props.listPoint.map((value)=>(new Feature(new Point([+value.x,+value.y])))),\n      //       features: [new Feature(new Point(this.state.center))]\n      //     }),\n      //     style: new Style({\n      //       image: new Icon({\n      //         anchor: [0.5, 46],\n      //         anchorXUnits: IconAnchorUnits.FRACTION,\n      //         anchorYUnits: IconAnchorUnits.PIXELS,\n      //         opacity: 0.95,\n      //         src: 'https://img.icons8.com/color/search'\n      //       }),\n      //     })\n      //   })\n      // ],\n      view: new OlView({\n        center: this.state.center,\n        zoom: this.state.zoom\n      }) // interactions: \n\n    });\n\n    this.setOLMAP = () => {\n      console.log(\"Maprender\"); // this.olmap.addLayer()\n      // this.olmap.setTarget(\"map\");\n\n      this.olmap = new OlMap({\n        target: undefined,\n        layers: [this.raster, new VectorLayer({\n          source: new VectorSource({\n            features: this.props.listPoint.map(value => new Feature(new Point(fromLonLat([+value.x, +value.y]))))\n          }),\n          style: new Style({\n            image: new Icon({\n              anchor: [0.5, 46],\n              anchorXUnits: IconAnchorUnits.FRACTION,\n              anchorYUnits: IconAnchorUnits.PIXELS,\n              opacity: 0.95,\n              src: 'https://img.icons8.com/color/search'\n            })\n          })\n        })],\n        view: new OlView({\n          center: this.state.center,\n          zoom: this.state.zoom\n        })\n      });\n      console.log(\"MOUNT\"); // this.olmap.add(set)\n      // this.olmap.getLayers().setSource(new VectorSource({\n      //       features: this.props.listPoint.map((value)=>(new Feature(new Point([+value.x,+value.y]))))}))\n      // (new Draw({\n      //   source: new VectorSource({\n      //       features: this.props.listPoint.map((value)=>(new Feature(new Point([+value.x,+value.y])))),\n      //   }),\n      // style: new Style({\n      //   image: new Icon({\n      //     anchor: [0.5, 46],\n      //     anchorXUnits: IconAnchorUnits.FRACTION,\n      //     anchorYUnits: IconAnchorUnits.PIXELS,\n      //     opacity: 0.95,\n      //     src: 'https://img.icons8.com/color/search'\n      //   }),\n      // }),\n      // type: GeometryType.POINT\n      // }));\n    };\n  }\n\n  componentDidMount() {\n    this.olmap.setTarget(\"map\");\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, this.setOLMAP(), React.createElement(\"div\", {\n      id: \"map\",\n      style: {\n        position: \"relative\",\n        width: \"100%\",\n        height: \"90%\",\n        borderRadius: \"5rem\",\n        margin: \"2rem 0rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MyComponents;","map":{"version":3,"sources":["C:/Users/HSONNL/Desktop/myProject/NCOV-19/Repo/NCOV-19Manager/client/src/component/GoogleMapReact/index.tsx"],"names":["React","Component","OlMap","OlView","OSM","Vector","VectorSource","Tile","TileLayer","VectorLayer","Point","Icon","Style","Feature","IconAnchorUnits","fromLonLat","initState","center","zoom","feature","MyComponents","state","raster","source","olmap","target","undefined","view","setOLMAP","console","log","layers","features","props","listPoint","map","value","x","y","style","image","anchor","anchorXUnits","FRACTION","anchorYUnits","PIXELS","opacity","src","componentDidMount","setTarget","render","position","width","height","borderRadius","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport OlMap from \"ol/Map\";\r\nimport OlView from \"ol/View\";\r\nimport OlLayerTile from \"ol/layer/Tile\";\r\nimport OlSourceOSM from \"ol/source/OSM\";\r\nimport {OSM, Vector as VectorSource} from 'ol/source';\r\nimport {Tile as TileLayer, Vector as VectorLayer} from 'ol/layer';\r\nimport Draw from 'ol/interaction/Draw';\r\nimport {LineString, Point, Polygon} from 'ol/geom';\r\nimport {Fill, Icon, Stroke, Style, Circle,} from 'ol/style';\r\nimport GeometryType from \"ol/geom/GeometryType\";\r\nimport { Feature } from \"ol\";\r\nimport IconAnchorUnits from \"ol/style/IconAnchorUnits\";\r\nimport {fromLonLat} from 'ol/proj';\r\nimport LayerGroup from 'ol/layer/Group';\r\nimport Collection from 'ol/Collection';\r\ntype State = typeof initState;\r\nconst initState = {\r\n  center: fromLonLat([106.79666,10.84811]),\r\n  zoom: 15,\r\n  feature: [] as Feature<Point>[],\r\n  // olmap: new OlMap({\r\n  //     target: undefined,\r\n  //     layers: [new TileLayer({source: new OSM()}),\r\n  //       new VectorLayer({\r\n  //         source: new VectorSource({\r\n  //           features: [new Feature(new Point([106.79663935413441,10.84811849654838])),new Feature(new Point([100123,10600]))],\r\n  //         }),\r\n  //         style: new Style({\r\n  //           image: new Icon({\r\n  //             anchor: [0.5, 46],\r\n  //             anchorXUnits: IconAnchorUnits.FRACTION,\r\n  //             anchorYUnits: IconAnchorUnits.PIXELS,\r\n  //             opacity: 0.95,\r\n  //             src: 'https://img.icons8.com/color/search'\r\n  //           }),\r\n  //         })\r\n  //       })\r\n  //     ],\r\n  //     view: new OlView({\r\n  //       center: [0,0],\r\n  //       zoom: 1\r\n  //     }),\r\n  // })\r\n}\r\n\r\ninterface Location{\r\n  x:number,\r\n  y:number\r\n}\r\ninterface Props{\r\n  listPoint:Location[]\r\n}\r\nclass MyComponents extends Component<Props,State> {\r\n  state = initState;\r\n  raster = new TileLayer({\r\n    source: new OSM()\r\n  });\r\n\r\n  // source = new VectorSource({wrapX: false});\r\n  // vector = new VectorLayer({\r\n  //   source: this.source\r\n  // });\r\n  \r\n  olmap:OlMap = new OlMap({\r\n      target: undefined,\r\n      // layers: [this.raster,\r\n      //   new VectorLayer({\r\n      //     source: new VectorSource({\r\n      //       // features: this.props.listPoint.map((value)=>(new Feature(new Point([+value.x,+value.y])))),\r\n      //       features: [new Feature(new Point(this.state.center))]\r\n      //     }),\r\n      //     style: new Style({\r\n      //       image: new Icon({\r\n      //         anchor: [0.5, 46],\r\n      //         anchorXUnits: IconAnchorUnits.FRACTION,\r\n      //         anchorYUnits: IconAnchorUnits.PIXELS,\r\n      //         opacity: 0.95,\r\n      //         src: 'https://img.icons8.com/color/search'\r\n      //       }),\r\n      //     })\r\n      //   })\r\n      // ],\r\n      view: new OlView({\r\n        center: this.state.center,\r\n        zoom: this.state.zoom\r\n      }),\r\n      // interactions: \r\n  })\r\n\r\n  componentDidMount() {\r\n    this.olmap.setTarget(\"map\");\r\n  }\r\n\r\n  setOLMAP = () =>{\r\n    console.log(\"Maprender\");\r\n    // this.olmap.addLayer()\r\n    // this.olmap.setTarget(\"map\");\r\n    this.olmap = new OlMap({\r\n      target: undefined,\r\n      layers: [this.raster,\r\n        new VectorLayer({\r\n          source: new VectorSource({\r\n            features: this.props.listPoint.map((value)=>(new Feature(new Point(fromLonLat([+value.x,+value.y]))))),\r\n          }),\r\n          style: new Style({\r\n            image: new Icon({\r\n              anchor: [0.5, 46],\r\n              anchorXUnits: IconAnchorUnits.FRACTION,\r\n              anchorYUnits: IconAnchorUnits.PIXELS,\r\n              opacity: 0.95,\r\n              src: 'https://img.icons8.com/color/search'\r\n            }),\r\n          })\r\n        })\r\n      ],\r\n      view: new OlView({\r\n        center: this.state.center,\r\n        zoom: this.state.zoom\r\n      })\r\n    })\r\n    console.log(\"MOUNT\")\r\n    // this.olmap.add(set)\r\n    // this.olmap.getLayers().setSource(new VectorSource({\r\n    //       features: this.props.listPoint.map((value)=>(new Feature(new Point([+value.x,+value.y]))))}))\r\n    // (new Draw({\r\n    //   source: new VectorSource({\r\n    //       features: this.props.listPoint.map((value)=>(new Feature(new Point([+value.x,+value.y])))),\r\n    //   }),\r\n      // style: new Style({\r\n      //   image: new Icon({\r\n      //     anchor: [0.5, 46],\r\n      //     anchorXUnits: IconAnchorUnits.FRACTION,\r\n      //     anchorYUnits: IconAnchorUnits.PIXELS,\r\n      //     opacity: 0.95,\r\n      //     src: 'https://img.icons8.com/color/search'\r\n      //   }),\r\n      // }),\r\n      // type: GeometryType.POINT\r\n    // }));\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.setOLMAP()}\r\n        <div id=\"map\" style={{position:\"relative\", width: \"100%\", height: \"90%\", borderRadius: \"5rem\", margin: \"2rem 0rem\"}}></div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyComponents;"]},"metadata":{},"sourceType":"module"}