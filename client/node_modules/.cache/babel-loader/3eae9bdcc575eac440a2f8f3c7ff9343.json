{"ast":null,"code":"import axios from 'axios';\nexport default class RoomAPI {\n  constructor() {\n    this.getAll = (token, formData, response, error) => {\n      const data = {\n        \"page\": formData.get(\"page\"),\n        \"typesort\": formData.get(\"typesort\"),\n        \"search\": formData.get(\"search\")\n      };\n      console.log(data); // axios.get('/api/room/',{ headers: { Authorization: token },data:data })\n\n      $.get('/api/room/', {\n        headers: {\n          Authorization: token\n        },\n        data: data\n      }) // fetch(\n      //   '/api/room/',\n      //   {\n      //     method:'GET',\n      //     headers:{\n      //       Authorization: token\n      //     },\n      //     body:JSON.stringify(data)\n      //   }\n      // )\n      // axios({\n      //   method: 'GET',\n      //   url: '/api/room/',\n      //   data:data,\n      //   headers: {\n      //     Authorization: token\n      //   }\n      // })\n      .then(response).catch(error);\n    };\n\n    this.get = (token, idRoom, response, error) => {\n      axios.get('/api/room/' + idRoom, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.upDate = (token, idRoom, formData, response, error) => {\n      const data = {\n        \"currentNumber\": formData.get(\"currentNumber\")\n      };\n      axios.put('/api/room/' + idRoom, data, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.delete = (token, idRoom, response, error) => {\n      axios({\n        method: 'DELETE',\n        url: '/api/room/' + idRoom,\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.create = (token, formData, response, error) => {\n      const data = {\n        \"maxNumber\": formData.get(\"maxNumber\"),\n        \"address\": formData.get(\"address\"),\n        \"name\": formData.get(\"name\")\n      };\n      axios.post('/api/room/', data, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/HSONNL/Desktop/myProject/NCOV-19/Repo/NCOV-19Manager/client/src/modules/api/room.ts"],"names":["axios","RoomAPI","getAll","token","formData","response","error","data","get","console","log","$","headers","Authorization","then","catch","idRoom","upDate","put","delete","method","url","create","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,OAAN,CAAc;AAAA;AAAA,SAE3BC,MAF2B,GAElB,CAACC,KAAD,EAAeC,QAAf,EAAmCC,QAAnC,EAAkDC,KAAlD,KAAiE;AACxE,YAAMC,IAAI,GAAG;AACX,gBAAQH,QAAQ,CAACI,GAAT,CAAa,MAAb,CADG;AAEX,oBAAYJ,QAAQ,CAACI,GAAT,CAAa,UAAb,CAFD;AAGX,kBAAUJ,QAAQ,CAACI,GAAT,CAAa,QAAb;AAHC,OAAb;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EANwE,CAOxE;;AACAI,MAAAA,CAAC,CAACH,GAAF,CAAM,YAAN,EAAmB;AAAEI,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEV;AAAjB,SAAX;AAAoCI,QAAAA,IAAI,EAACA;AAAzC,OAAnB,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA,OAmBGO,IAnBH,CAmBQT,QAnBR,EAoBGU,KApBH,CAoBST,KApBT;AAqBD,KA/B0B;;AAAA,SAiC3BE,GAjC2B,GAiCrB,CAACL,KAAD,EAAgBa,MAAhB,EAAgCX,QAAhC,EAA+CC,KAA/C,KAA8D;AAClEN,MAAAA,KAAK,CAACQ,GAAN,CAAU,eAAeQ,MAAzB,EAAiC;AAAEJ,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEV;AAAjB;AAAX,OAAjC,EACGW,IADH,CACQT,QADR,EAEGU,KAFH,CAEST,KAFT;AAGD,KArC0B;;AAAA,SAsC3BW,MAtC2B,GAsClB,CAACd,KAAD,EAAgBa,MAAhB,EAAgCZ,QAAhC,EAAoDC,QAApD,EAAmEC,KAAnE,KAAkF;AACzF,YAAMC,IAAI,GAAG;AACX,yBAAiBH,QAAQ,CAACI,GAAT,CAAa,eAAb;AADN,OAAb;AAGAR,MAAAA,KAAK,CAACkB,GAAN,CAAU,eAAeF,MAAzB,EAAiCT,IAAjC,EAAuC;AAAEK,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEV;AAAjB;AAAX,OAAvC,EACGW,IADH,CACQT,QADR,EAEGU,KAFH,CAEST,KAFT;AAGD,KA7C0B;;AAAA,SA+C3Ba,MA/C2B,GA+ClB,CAAChB,KAAD,EAAgBa,MAAhB,EAAgCX,QAAhC,EAA+CC,KAA/C,KAA8D;AACrEN,MAAAA,KAAK,CAAC;AACJoB,QAAAA,MAAM,EAAE,QADJ;AAEJC,QAAAA,GAAG,EAAE,eAAeL,MAFhB;AAGJJ,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAEV;AADR;AAHL,OAAD,CAAL,CAQGW,IARH,CAQQT,QARR,EASGU,KATH,CASST,KATT;AAUD,KA1D0B;;AAAA,SA4D3BgB,MA5D2B,GA4DlB,CAACnB,KAAD,EAAgBC,QAAhB,EAAoCC,QAApC,EAAmDC,KAAnD,KAAkE;AACzE,YAAMC,IAAI,GAAG;AACX,qBAAaH,QAAQ,CAACI,GAAT,CAAa,WAAb,CADF;AAEX,mBAAWJ,QAAQ,CAACI,GAAT,CAAa,SAAb,CAFA;AAGX,gBAAQJ,QAAQ,CAACI,GAAT,CAAa,MAAb;AAHG,OAAb;AAKAR,MAAAA,KAAK,CAACuB,IAAN,CAAW,YAAX,EAAyBhB,IAAzB,EAA+B;AAAEK,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEV;AAAjB;AAAX,OAA/B,EACGW,IADH,CACQT,QADR,EAEGU,KAFH,CAEST,KAFT;AAGD,KArE0B;AAAA;;AAAA","sourcesContent":["import axios from 'axios'\r\n\r\nexport default class RoomAPI {\r\n\r\n  getAll = (token: string,formData: FormData, response: any, error: any) => {\r\n    const data = {\r\n      \"page\": formData.get(\"page\"),\r\n      \"typesort\": formData.get(\"typesort\"),\r\n      \"search\": formData.get(\"search\")\r\n    }\r\n    console.log(data);\r\n    // axios.get('/api/room/',{ headers: { Authorization: token },data:data })\r\n    $.get('/api/room/',{ headers: { Authorization: token },data:data })\r\n    // fetch(\r\n    //   '/api/room/',\r\n    //   {\r\n    //     method:'GET',\r\n    //     headers:{\r\n    //       Authorization: token\r\n    //     },\r\n    //     body:JSON.stringify(data)\r\n    //   }\r\n    // )\r\n    // axios({\r\n    //   method: 'GET',\r\n    //   url: '/api/room/',\r\n    //   data:data,\r\n    //   headers: {\r\n    //     Authorization: token\r\n    //   }\r\n    // })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  get = (token: string, idRoom: string, response: any, error: any) => {\r\n    axios.get('/api/room/' + idRoom, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n  upDate = (token: string, idRoom: string, formData: FormData, response: any, error: any) => {\r\n    const data = {\r\n      \"currentNumber\": formData.get(\"currentNumber\")\r\n    }\r\n    axios.put('/api/room/' + idRoom, data, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  delete = (token: string, idRoom: string, response: any, error: any) => {\r\n    axios({\r\n      method: 'DELETE',\r\n      url: '/api/room/' + idRoom,\r\n      headers: {\r\n        Authorization: token\r\n      }\r\n    }\r\n    )\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  create = (token: string, formData: FormData, response: any, error: any) => {\r\n    const data = {\r\n      \"maxNumber\": formData.get(\"maxNumber\"),\r\n      \"address\": formData.get(\"address\"),\r\n      \"name\": formData.get(\"name\")\r\n    }\r\n    axios.post('/api/room/', data, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}