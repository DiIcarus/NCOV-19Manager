{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HSONNL\\\\Desktop\\\\myProject\\\\NCOV-19\\\\Repo\\\\NCOV-19Manager\\\\client\\\\src\\\\component\\\\ChartData\\\\index.tsx\";\nimport React, { Component } from \"react\"; //style importer\n\nimport * as s__ from \"./style\";\nimport { Bar } from 'react-chartjs-2';\n// interface \nconst initState = {\n  datasetLineChart: {\n    header: \"This is header\",\n    xAsis: [1500, 1600, 1700, 1750, 1800, 1850, 1900, 1950, 1999, 2050],\n    datas: [{\n      labelName: \"A\",\n      data: [86, 114, 106, 106, 107, 111, 133, 221, 783, 2478]\n    }, {\n      labelName: \"B\",\n      data: [282, 350, 411, 502, 635, 809, 947, 1402, 3700, 4267]\n    }, {\n      labelName: \"C\",\n      data: [168, 170, 178, 190, 203, 276, 408, 547, 675, 734]\n    }, {\n      labelName: \"D\",\n      data: [40, 20, 10, 16, 24, 38, 74, 167, 508, 784]\n    }]\n  }\n};\n\nclass ChartData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initState;\n    this.datasets = [];\n    this.colorProps = ['#3e95cd', '#8e5ea2', '#3cba9f', '#c45850'];\n    this.DonutLabel = [\"Africa\", \"Asia\", \"Europe\", \"Latin America\"];\n    this.DonutHeader = \"Predicted world population (millions) in 2050\";\n    this.BarColor = [\"#3e95cd\", \"#8e5ea2\", \"#3cba9f\", \"#e8c3b9\", \"#c45850\"];\n    this.BarLabel = [\"Africa\", \"Asia\", \"Europe\", \"Latin America\", \"North America\"];\n\n    this.ojbectData = (data = [], LabelName = \"null\", Color = \"#333\") => {\n      return {\n        data: data,\n        label: LabelName,\n        borderColor: Color,\n        fill: false\n      };\n    };\n\n    this.objectData1 = () => {\n      return {\n        label: \"Population (millions)\",\n        backgroundColor: this.colorProps,\n        data: [2478, 5267, 734, 784]\n      };\n    };\n\n    this.objectData2 = () => {\n      return [2478, 5267, 734, 784, 433];\n    };\n\n    this.getData = typeChart => {\n      switch (typeChart) {\n        case \"Line\":\n          return this.state.datasetLineChart.datas.map((value, index) => this.ojbectData(value.data, value.labelName, this.colorProps[index]));\n\n        case \"Doughnut\":\n          return [this.objectData1()];\n\n        case \"Bar\":\n          return;\n      }\n    };\n\n    this.renderChart = () => {\n      return () => {};\n    };\n  }\n\n  render() {\n    return React.createElement(s__.Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: {\n        labels: this.BarLabel,\n        datasets: []\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: \"Predicted world population (millions) in 2050\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ChartData;","map":{"version":3,"sources":["C:/Users/HSONNL/Desktop/myProject/NCOV-19/Repo/NCOV-19Manager/client/src/component/ChartData/index.tsx"],"names":["React","Component","s__","Bar","initState","datasetLineChart","header","xAsis","datas","labelName","data","ChartData","state","datasets","colorProps","DonutLabel","DonutHeader","BarColor","BarLabel","ojbectData","LabelName","Color","label","borderColor","fill","objectData1","backgroundColor","objectData2","getData","typeChart","map","value","index","renderChart","render","labels","legend","display","title","text"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n//style importer\r\nimport * as s__ from \"./style\";\r\nimport { Line, Bar, Doughnut  } from 'react-chartjs-2';\r\n\r\ninterface Data {\r\n  labelName:string,\r\n  data:number[],\r\n}\r\ninterface DataTable{\r\n  header:string,\r\n  xAsis:number[],\r\n  datas:Data[]\r\n}\r\n\r\n// interface \r\nconst initState = {\r\n  datasetLineChart:{\r\n    header:\"This is header\",\r\n    xAsis:[1500, 1600, 1700, 1750, 1800, 1850, 1900, 1950, 1999, 2050],\r\n    datas:[{\r\n      labelName:\"A\",\r\n      data:[86, 114, 106, 106, 107, 111, 133, 221, 783, 2478],\r\n    },{\r\n      labelName:\"B\",\r\n      data:[282, 350, 411, 502, 635, 809, 947, 1402, 3700, 4267],\r\n    },{\r\n      labelName:\"C\",\r\n      data:[168, 170, 178, 190, 203, 276, 408, 547, 675, 734],\r\n    },{\r\n      labelName:\"D\",\r\n      data:[40, 20, 10, 16, 24, 38, 74, 167, 508, 784],\r\n    }]\r\n  } as DataTable\r\n}\r\ntype State = typeof initState;\r\ninterface Props{\r\n\r\n}\r\n\r\nclass ChartData extends Component<Props,State> {\r\n\r\n  state = initState;\r\n  datasets:any[] = [];\r\n  colorProps:string[] = ['#3e95cd','#8e5ea2','#3cba9f','#c45850'];\r\n  DonutLabel:string[]= [\r\n            \"Africa\",\r\n            \"Asia\",\r\n            \"Europe\",\r\n            \"Latin America\"\r\n          ]\r\n  DonutHeader:string = \"Predicted world population (millions) in 2050\";\r\n  BarColor:string[] = [\r\n            \"#3e95cd\",\r\n            \"#8e5ea2\",\r\n            \"#3cba9f\",\r\n            \"#e8c3b9\",\r\n            \"#c45850\"\r\n          ];\r\n  BarLabel:string[]=[\r\n              \"Africa\",\r\n              \"Asia\",\r\n              \"Europe\",\r\n              \"Latin America\",\r\n              \"North America\"\r\n            ];\r\n  ojbectData = (data:number[] = [],LabelName:string = \"null\",Color:string = \"#333\")=>{\r\n    return {\r\n      data: data,\r\n      label: LabelName,\r\n      borderColor: Color,\r\n      fill: false\r\n    }\r\n  }\r\n\r\n  objectData1 = ()=>{\r\n      return {\r\n      label: \"Population (millions)\",\r\n      backgroundColor: this.colorProps,\r\n      data: [2478, 5267, 734, 784]\r\n    }\r\n  }\r\n\r\n  objectData2 = ()=>{\r\n    return [2478, 5267, 734, 784, 433]\r\n  }\r\n\r\n  getData=(typeChart:string)=>{\r\n    switch(typeChart){\r\n      case \"Line\":\r\n        return this.state.datasetLineChart.datas.map((value:any,index:any)=>this.ojbectData(value.data,value.labelName,this.colorProps[index]))\r\n      case \"Doughnut\":\r\n        return [this.objectData1()];\r\n      case \"Bar\":\r\n        return;\r\n    }\r\n  }\r\n\r\n  renderChart=()=>{\r\n    return () => {\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <s__.Container>\r\n        <Bar\r\n          data={{\r\n            labels: this.BarLabel,\r\n            datasets: [\r\n              \r\n            ]\r\n          }}\r\n          options={{\r\n            legend: { display: false },\r\n            title: {\r\n              display: true,\r\n              text: \"Predicted world population (millions) in 2050\"\r\n            }\r\n          }}\r\n        />\r\n        {/* <Line data={{\r\n          labels: this.state.datasetLineChart.xAsis,\r\n          datasets: this.getData(\"Line\"),\r\n        }}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text: this.state.datasetLineChart.header,\r\n          },\r\n          legend: {\r\n            display: true,\r\n            position: \"bottom\"\r\n          }\r\n        }}\r\n        />\r\n        <Doughnut\r\n        data={{\r\n          labels: this.DonutLabel,\r\n          datasets: this.getData(\"Doughnut\")\r\n        }}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text: this.DonutHeader\r\n          }\r\n        }}\r\n        /> */}\r\n      </s__.Container>\r\n    )  \r\n              \r\n  }\r\n}\r\n\r\nexport default ChartData;\r\n"]},"metadata":{},"sourceType":"module"}