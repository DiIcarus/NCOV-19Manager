{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import React, { Component } from \"react\";\r\n// import * as s__ from \"./style\";\r\n// import MenuTop from \"./../MenuTop/index\";\r\n// import { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\n// import FormRegister from \"./../FormRegister/index\";\r\n// import FormSignin from \"./../FormSignIn/index\";\r\n\r\n// import ChartData from \"../ChartData/index\";\r\n// import HomeComponent from \"../HomeComponent/index\";\r\n// import ManagerComponent from '../ManagerComponent/index';\r\n// import Footer from \"../Footer/index\";\r\n// import  { MainState } from '../../store/index';\r\n// import {connect} from 'react-redux';\r\n// import {UserssignedState} from '../../store/UsersSigned/type';\r\n// type Props = {\r\n//   UserssignedState: UserssignedState\r\n// }\r\n// class RootContainer extends Component {\r\n//   componentDidMount(){\r\n//     window.localStorage.setItem('UsersInfo',JSON.stringify(\"\"));\r\n//     window.sessionStorage.setItem('UsersInfo',JSON.stringify(\"\"));\r\n//     // setInterval(()=>{\r\n//     //   //undefine\r\n//     //   // let str = \r\n//     //   let a:object = JSON.parse( String(window.localStorage.getItem('UsersInfo')));\r\n//     //   console.log(a)\r\n//     //   console.log(window.sessionStorage.accessToken)\r\n//     // },2000);\r\n//   }\r\n//   renderSwitch = () => {\r\n//     return (\r\n//       <Switch>\r\n//         <Route path=\"/manager\" children={<ManagerComponent />}/>\r\n//         <Route path=\"/register\" children={<FormRegister />}/>\r\n//         <Route path=\"/signin\" children={<FormSignin />}/>\r\n//         <Route path=\"/\" children={<HomeComponent />} />\r\n//       </Switch>\r\n//     );\r\n//   };\r\n\r\n\r\n//   render() {\r\n//     return (\r\n//       <s__.Container>\r\n//         <MenuTop />\r\n//         {this.renderSwitch()}\r\n//         <Footer/>\r\n//       </s__.Container>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = (state:MainState) => ( {\r\n//   UserssignedState: state.UserssignedState\r\n\r\n// })\r\n// export default connect(mapStateToProps,{})(RootContainer);\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect,\r\n  useHistory,\r\n  useLocation\r\n} from \"react-router-dom\";\r\n\r\n// This example has 3 pages: a public page, a protected\r\n// page, and a login screen. In order to see the protected\r\n// page, you must first login. Pretty standard stuff.\r\n//\r\n// First, visit the public page. Then, visit the protected\r\n// page. You're not yet logged in, so you are redirected\r\n// to the login page. After you login, you are redirected\r\n// back to the protected page.\r\n//\r\n// Notice the URL change each time. If you click the back\r\n// button at this point, would you expect to go back to the\r\n// login page? No! You're already logged in. Try it out,\r\n// and you'll see you go back to the page you visited\r\n// just *before* logging in, the public page.\r\n\r\n// export default function AuthExample() {\r\n//   return (\r\n//     <Router>\r\n//       <div>\r\n//         <AuthButton />\r\n//         <ul>\r\n//           <li>\r\n//             <Link to=\"/public\">Public Page</Link>\r\n//           </li>\r\n//           <li>\r\n//             <Link to=\"/protected\">Protected Page</Link>\r\n//           </li>\r\n//         </ul>\r\n//         <Switch>\r\n//           <Route path=\"/public\">\r\n//             <PublicPage />\r\n//           </Route>\r\n//           <Route path=\"/login\">\r\n//             <LoginPage />\r\n//           </Route>\r\n//           <PrivateRoute path=\"/protected\">\r\n//             <ProtectedPage />\r\n//           </PrivateRoute>\r\n//         </Switch>\r\n//       </div>\r\n//     </Router>\r\n//   );\r\n// }\r\n\r\n// const fakeAuth = {\r\n//   isAuthenticated: false,\r\n//   authenticate(cb:any) {\r\n//     fakeAuth.isAuthenticated = true;\r\n//     setTimeout(cb, 100); // fake async\r\n//   },\r\n//   signout(cb:any) {\r\n//     fakeAuth.isAuthenticated = false;\r\n//     setTimeout(cb, 100);\r\n//   }\r\n// };\r\n\r\n// function AuthButton() {\r\n//   let history = useHistory();\r\n//   return fakeAuth.isAuthenticated ? (\r\n//     <p>\r\n//       Welcome!{\" \"}\r\n//       <button\r\n//         onClick={() => {\r\n//           fakeAuth.signout(() => history.push(\"/\"));\r\n//         }}\r\n//       >\r\n//         Sign out\r\n//       </button>\r\n//     </p>\r\n//   ) : (\r\n//     <p>You are not logged in.</p>\r\n//   );\r\n// }\r\n\r\n// function PrivateRoute({...rest }) {\r\n//   return (\r\n//     <Route\r\n//       {...rest}\r\n//       render={({ location }) =>\r\n//         fakeAuth.isAuthenticated ? (\r\n//           <></>\r\n//         ) : (\r\n//           <Redirect\r\n//             to={{\r\n//               pathname: \"/login\",\r\n//               state: { from: location }\r\n//             }}\r\n//           />\r\n//         )\r\n//       }\r\n//     />\r\n//   );\r\n// }\r\n\r\n// function PublicPage() {\r\n//   return <h3>Public</h3>;\r\n// }\r\n\r\n// function ProtectedPage() {\r\n//   const history = useHistory();\r\n//   console.log(useHistory())\r\n//   let click =()=>{\r\n//     history.push('/login')\r\n//   }\r\n//   return <h3 onClick={click}>Protected</h3>;\r\n// }\r\n\r\n// function LoginPage() {\r\n//   const history = useHistory();\r\n//   let location1 = useLocation();\r\n//   console.log(\"Location\",useLocation())\r\n//   console.log(\"Hitory\",useHistory());\r\n//   console.log(\"Historyy\",window.history);\r\n//   let { from }:any = location1.state || { from: { pathname: \"/\" } };\r\n//   // console.log(from);\r\n//   // history.push(\"/aa\");\r\n//   // console.log(\"History1\",history);\r\n//   // history.goBack();\r\n//   let login = () => {\r\n//     history.replace(\"/\");\r\n//   };\r\n//   const location = {\r\n//     pathname: '/one-fish',\r\n//     // search: '?two=fish',\r\n//     // hash: '#red-fish-blue-fish'\r\n//   }\r\n//   const url = history.createHref(location)\r\n\r\n//   return (\r\n//     <div>\r\n//       <p>You must log in to view the page at {from.pathname}</p>\r\n//       <button onClick={login}>Log in</button>\r\n//       <a href={url}>sdfghjkl;'</a>\r\n//     </div>\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}