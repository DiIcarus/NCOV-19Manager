{"ast":null,"code":"import axios from \"axios\";\nimport * as config__ from './../config';\nconst GETALL = config__.ADMINURLALL;\nconst DELETE = config__.ADMINURL;\nconst UPDATE = config__.ADMINURL;\nconst ADDSHIFTTODOCTOR = config__.ADMINADDSHIFT;\nconst ROOM = config__.ROOM;\nexport default class AdminAPI {\n  constructor() {\n    this.getAll = (token, response, error) => {\n      axios.get(GETALL, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.getList = (token, params, response, error) => {\n      axios.get(GETALL + params, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.activeDoctor = (token, id, response, error) => {\n      // axios.put(ROOM + id,{},{headers:{Authorization: token}})\n      axios({\n        me\n      }).then(response).catch(error);\n    };\n\n    this.deleteUser = (token, idUser, response, error) => {\n      axios({\n        method: 'DELETE',\n        url: DELETE + idUser,\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.updateUser = (token, idUser, formData, response, error) => {\n      const data = {\n        \"email\": formData.get(\"email\")\n      };\n      axios.put(UPDATE + idUser, data, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n\n    this.addShiftToDoctor = (token, idDoctor, formData, response, error) => {\n      const data = {\n        \"idShift\": formData.get(\"idShift\")\n      };\n      axios.post(ADDSHIFTTODOCTOR + idDoctor, data, {\n        headers: {\n          Authorization: token\n        }\n      }).then(response).catch(error);\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/HSONNL/Desktop/myProject/NCOV-19/Repo/NCOV-19Manager/client/src/modules/api/admin.ts"],"names":["axios","config__","GETALL","ADMINURLALL","DELETE","ADMINURL","UPDATE","ADDSHIFTTODOCTOR","ADMINADDSHIFT","ROOM","AdminAPI","getAll","token","response","error","get","headers","Authorization","then","catch","getList","params","activeDoctor","id","me","deleteUser","idUser","method","url","updateUser","formData","data","put","addShiftToDoctor","idDoctor","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,QAAZ,MAA0B,aAA1B;AACA,MAAMC,MAAc,GAAGD,QAAQ,CAACE,WAAhC;AACA,MAAMC,MAAc,GAAGH,QAAQ,CAACI,QAAhC;AACA,MAAMC,MAAc,GAAGL,QAAQ,CAACI,QAAhC;AACA,MAAME,gBAAwB,GAAGN,QAAQ,CAACO,aAA1C;AACA,MAAMC,IAAW,GAAGR,QAAQ,CAACQ,IAA7B;AACA,eAAe,MAAMC,QAAN,CAAe;AAAA;AAAA,SAE5BC,MAF4B,GAEnB,CAACC,KAAD,EAAgBC,QAAhB,EAA+BC,KAA/B,KAA8C;AACrDd,MAAAA,KAAK,CAACe,GAAN,CAAUb,MAAV,EAAkB;AAAEc,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEL;AAAjB;AAAX,OAAlB,EACGM,IADH,CACQL,QADR,EAEGM,KAFH,CAESL,KAFT;AAGD,KAN2B;;AAAA,SAO5BM,OAP4B,GAOlB,CAACR,KAAD,EAAeS,MAAf,EAA8BR,QAA9B,EAA6CC,KAA7C,KAA4D;AACpEd,MAAAA,KAAK,CAACe,GAAN,CAAUb,MAAM,GAACmB,MAAjB,EAAyB;AAAEL,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEL;AAAjB;AAAX,OAAzB,EACGM,IADH,CACQL,QADR,EAEGM,KAFH,CAESL,KAFT;AAGD,KAX2B;;AAAA,SAY5BQ,YAZ4B,GAYb,CAACV,KAAD,EAAcW,EAAd,EAAwBV,QAAxB,EAAqCC,KAArC,KAAkD;AAC/D;AACAd,MAAAA,KAAK,CAAC;AACJwB,QAAAA;AADI,OAAD,CAAL,CAGCN,IAHD,CAGML,QAHN,EAICM,KAJD,CAIOL,KAJP;AAKD,KAnB2B;;AAAA,SAoB5BW,UApB4B,GAoBf,CAACb,KAAD,EAAgBc,MAAhB,EAAgCb,QAAhC,EAA+CC,KAA/C,KAA8D;AACzEd,MAAAA,KAAK,CAAC;AACJ2B,QAAAA,MAAM,EAAE,QADJ;AAEJC,QAAAA,GAAG,EAAExB,MAAM,GAAGsB,MAFV;AAGJV,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAEL;AADR;AAHL,OAAD,CAAL,CAQGM,IARH,CAQQL,QARR,EASGM,KATH,CASSL,KATT;AAUD,KA/B2B;;AAAA,SAiC5Be,UAjC4B,GAiCf,CAACjB,KAAD,EAAgBc,MAAhB,EAAgCI,QAAhC,EAAoDjB,QAApD,EAAmEC,KAAnE,KAAkF;AAC7F,YAAMiB,IAAI,GAAG;AACX,iBAASD,QAAQ,CAACf,GAAT,CAAa,OAAb;AADE,OAAb;AAGAf,MAAAA,KAAK,CAACgC,GAAN,CAAU1B,MAAM,GAAGoB,MAAnB,EAA2BK,IAA3B,EAAiC;AAAEf,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEL;AAAjB;AAAX,OAAjC,EACGM,IADH,CACQL,QADR,EAEGM,KAFH,CAESL,KAFT;AAGD,KAxC2B;;AAAA,SA0C5BmB,gBA1C4B,GA0CT,CAACrB,KAAD,EAAgBsB,QAAhB,EAAkCJ,QAAlC,EAAsDjB,QAAtD,EAAqEC,KAArE,KAAoF;AACrG,YAAMiB,IAAI,GAAG;AACX,mBAAWD,QAAQ,CAACf,GAAT,CAAa,SAAb;AADA,OAAb;AAGAf,MAAAA,KAAK,CAACmC,IAAN,CAAW5B,gBAAgB,GAAG2B,QAA9B,EAAwCH,IAAxC,EAA8C;AAAEf,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAEL;AAAjB;AAAX,OAA9C,EACGM,IADH,CACQL,QADR,EAEGM,KAFH,CAESL,KAFT;AAGD,KAjD2B;AAAA;;AAAA","sourcesContent":["import axios from \"axios\";\r\nimport * as config__ from './../config';\r\nconst GETALL: string = config__.ADMINURLALL;\r\nconst DELETE: string = config__.ADMINURL;\r\nconst UPDATE: string = config__.ADMINURL;\r\nconst ADDSHIFTTODOCTOR: string = config__.ADMINADDSHIFT;\r\nconst ROOM:string = config__.ROOM;\r\nexport default class AdminAPI {\r\n\r\n  getAll = (token: string, response: any, error: any) => {\r\n    axios.get(GETALL, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n  getList = (token: string,params:string, response: any, error: any) => {\r\n    axios.get(GETALL+params, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n  activeDoctor = (token:string,id:string,response:any,error:any) =>{\r\n    // axios.put(ROOM + id,{},{headers:{Authorization: token}})\r\n    axios({\r\n      me\r\n    })\r\n    .then(response)\r\n    .catch(error)\r\n  }\r\n  deleteUser = (token: string, idUser: string, response: any, error: any) => {\r\n    axios({\r\n      method: 'DELETE',\r\n      url: DELETE + idUser,\r\n      headers: {\r\n        Authorization: token\r\n      }\r\n    }\r\n    )\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  updateUser = (token: string, idUser: string, formData: FormData, response: any, error: any) => {\r\n    const data = {\r\n      \"email\": formData.get(\"email\")\r\n    }\r\n    axios.put(UPDATE + idUser, data, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n\r\n  addShiftToDoctor = (token: string, idDoctor: string, formData: FormData, response: any, error: any) => {\r\n    const data = {\r\n      \"idShift\": formData.get(\"idShift\")\r\n    }\r\n    axios.post(ADDSHIFTTODOCTOR + idDoctor, data, { headers: { Authorization: token } })\r\n      .then(response)\r\n      .catch(error);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}